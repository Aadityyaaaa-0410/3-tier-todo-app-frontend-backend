name: Deploy Backend to EC2 via SSM

on:
  push:
    branches:
      - master
    paths:
      - 'backend/**'

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2 (Green Environment) via SSM
        run: |
          echo "Fetching EC2 Instances with tag Name=green..."

          INSTANCE_IDS=$(aws ssm describe-instance-information \
            --filters "Key=tag:Name,Values=green" \
            --query "InstanceInformationList[].InstanceId" \
            --output text)

          if [ -z "$INSTANCE_IDS" ]; then
            echo "❌ No EC2 instances found with tag Name=green"
            exit 1
          fi

          for ID in $INSTANCE_IDS; do
            echo "🚀 Deploying to instance: $ID"

            aws ssm send-command \
              --instance-ids "$ID" \
              --document-name "AWS-RunShellScript" \
              --comment "Fresh clone and restart PM2 backend server" \
              --parameters commands='[
                "sudo -u ubuntu bash -c '\''cd /home/ubuntu; \
                rm -rf 3-tier-todo-app-frontend-backend; \
                git clone https://github.com/Aadityyaaaa-0410/3-tier-todo-app-frontend-backend.git; \
                cd 3-tier-todo-app-frontend-backend/backend; \
                npm install; \
                pm2 describe server > /dev/null 2>&1 && pm2 reload server || pm2 start app.js --name server; \
                pm2 save'\''"
              ]' \
              --region us-east-1

            echo "✅ Command sent to $ID"
          done

          echo "🎉 Deployment command sent to all GREEN EC2 instances!"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Switch ALB to Green TG + Validate Health
        env:
          LISTENER_ARN: arn:aws:elasticloadbalancing:us-east-1:533267349233:listener/app/app-alb/875bca219355eec1/8712d71e13e00b72
          OLD_TG_ARN: arn:aws:elasticloadbalancing:us-east-1:533267349233:targetgroup/blue-tg/23a0a2721e8f7154
          NEW_TG_ARN: arn:aws:elasticloadbalancing:us-east-1:533267349233:targetgroup/green-tg/31108f255f307107
          ALB_DNS: app-alb-270296790.us-east-1.elb.amazonaws.com
        run: |
          set -e

          echo "Switching 100% traffic to green-tg..."
          aws elbv2 modify-listener \
            --listener-arn "$LISTENER_ARN" \
            --default-actions '[{"Type":"forward","TargetGroupArn":"'"$NEW_TG_ARN"'"}]' > /dev/null

          echo "Waiting 30s for traffic to route..."
          sleep 30

          HEALTH_URL="http://$ALB_DNS/health"
          echo "Checking /health endpoint..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL")

          echo "Checking green-tg health..."
          HEALTHY_COUNT=$(aws elbv2 describe-target-health \
            --target-group-arn "$NEW_TG_ARN" \
            --query "TargetHealthDescriptions[?TargetHealth.State=='healthy'].Target.Id" \
            --output json | jq length)

          TOTAL_COUNT=$(aws elbv2 describe-target-health \
            --target-group-arn "$NEW_TG_ARN" \
            --query "length(TargetHealthDescriptions[])" --output text)

          if [[ "$HTTP_STATUS" -eq 200 && "$HEALTHY_COUNT" -eq "$TOTAL_COUNT" && "$TOTAL_COUNT" -gt 0 ]]; then
            echo "✅ SUCCESS: Deployment validated!"
            echo "  /health → $HTTP_STATUS"
            echo "  TG Health → $HEALTHY_COUNT/$TOTAL_COUNT targets healthy"
          else
            echo "❌ VALIDATION FAILED:"
            echo "  /health → $HTTP_STATUS"
            echo "  TG Health → $HEALTHY_COUNT/$TOTAL_COUNT healthy"

            echo "♻️ ROLLING BACK to blue-tg..."
            aws elbv2 modify-listener \
              --listener-arn "$LISTENER_ARN" \
              --default-actions '[{"Type":"forward","TargetGroupArn":"'"$OLD_TG_ARN"'"}]' > /dev/null

            echo "Rollback: Deployment failed"
            exit 1
          fi
